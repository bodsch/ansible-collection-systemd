#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# (c) 2020-2023, Bodo Schulz <bodo@boone-schulz.de>
# Apache-2.0 (see LICENSE or https://opensource.org/license/apache-2-0)
# SPDX-License-Identifier: Apache-2.0

from __future__ import absolute_import, division, print_function

import os
import shutil

from ansible_collections.bodsch.core.plugins.module_utils.directory import create_directory
from ansible_collections.bodsch.core.plugins.module_utils.checksum import Checksum

from ansible.module_utils.basic import AnsibleModule
# from jinja2 import Environment, FileSystemLoader

UNIT_TPL = """# generated by ansible

{% for section, options in item.items() %}
[{{ section }}]
  {% for option, values in options.items() %}
    {% if values is string or values is number %}
{{ option }}={{ values }}
    {% else %}
      {% for value in values %}
{{ option }}={{ value }}
      {% endfor %}
    {% endif %}
  {% endfor %}

{% endfor %}
{#
#}
"""


class SystemdUnitFile(object):
    """
    """
    module = None

    def __init__(self, module):
        """
        """
        self.module = module

        # self._journalctl = module.get_bin_path("journalctl", True)

        self.unit_type = module.params.get("unit_type")
        self.name = module.params.get("name")
        self.state = module.params.get("state")
        self.overwrite = module.params.get("overwrite")
        self.drop_ins = module.params.get("drop_ins")
        # self.unit = module.params.get("unit")
        # self.service = module.params.get("service")
        # self.install = module.params.get("install")

        self.tmp_directory = os.path.join("/run/.ansible", f"systemd_unit")#.{str(os.getpid())}")
        self.service_name = f"/etc/systemd/system/{self.name}.d"

        # module.log(msg="----------------------------")
        # module.log(msg=f" journalctl   : {self._journalctl}")
        # module.log(msg=f" unit         : {self.unit}")
        # module.log(msg=f" identifier   : {self.identifier}")
        # module.log(msg=f" lines        : {self.lines}")
        # module.log(msg=f" reverse      : {self.reverse}")
        # module.log(msg=f" arguments    : {self.arguments}")
        # module.log(msg="----------------------------")

    def run(self):
        """
        """
        result = dict(
            rc=1,
            failed=True,
            changed=False,
        )

        if self.state == "absent":
            result = self.clean_unit_files()

        else:
            if isinstance(self.drop_ins, list) and len(self.drop_ins) > 0:
                create_directory(directory=self.tmp_directory, mode="0750")

                result = self.create_drop_in(self.drop_ins)

                # shutil.rmtree(self.tmp_directory)

            # result = self.journalctl_lines()

        return result

    def create_drop_in(self, data):
        """
        """
        # old_checksum = self.checksum.checksum_from_file(file_name)
        # new_checksum = self.checksum.checksum_from_file(file_temporary)

        self.module.log(msg="----------------------------")

        self.module.log(msg=f" service name   : {self.service_name}")

#        if

        # self.clean_unit_files(unit_state_absent)
        # self.create_unit_files(unit_state_absent)

        if not os.path.exists(self.service_name):
            create_directory(self.service_name)

        for drop_in in data:
            name = drop_in.get("name")
            state = drop_in.get("state", "present")

            unit_file = os.path.join(self.service_name, f"{name}.conf")
            file_temporary = os.path.join(self.tmp_directory, f"{name}.conf")

            self.module.log(msg=f" drop in name   : {name}")
            self.module.log(msg=f" drop file      : {unit_file}")
            self.module.log(msg=f" temporary file : {file_temporary}")

            if state == "present":
                file_temporary = os.path.join(self.tmp_directory, f"{name}.conf")

                data = self.__template(drop_in)
                # checksum = self.__checksum(data)

                with open(file_temporary, "w") as f:
                    f.write(data)

                result = dict(
                    changed=True,
                    failed=False
                )

            else:
                self.module.log(msg=f"remove : {unit_file}")

                if os.path.exists(unit_file):
                    shutil.rmtree(unit_file)

                    result = dict(
                        changed=True,
                        failed=False
                    )
                else:
                    result = dict(
                        changed=False,
                        failed=False
                    )

        self.module.log(msg="----------------------------")

        return result

    def __template(self, data):
        """
        """
        self.module.log(msg=f"__template({data} ({type(data)}))")

        if isinstance(data, dict):
            from jinja2 import Template

            _ = data.pop('name')
            _ = data.pop('state')

            self.module.log(msg=f"{data} ({type(data)})")

            tm = Template(UNIT_TPL, trim_blocks=True, lstrip_blocks=True)
            d = tm.render(item=data)
        else:
            d = None

        return d


def main():
    """
    """
    args = dict(
        unit_type=dict(
            choose=[
                "service",
                "socket",
                "timer"
            ],
            default="service",
            type="str"
        ),
        name=dict(
            required=True,
            type="str"
        ),
        state=dict(
            choose=[
                "absent",
                "present",
            ],
            default="present",
            type="str"
        ),
        overwrite=dict(
            required=False,
            default=False,
            type="bool"
        ),
        drop_ins=dict(
            required=False,
            default=[],
            type=list
        ),
        unit=dict(
            required=False,
            default={},
            type=dict
        ),
        service=dict(
            required=False,
            default={},
            type=dict
        ),
        install=dict(
            required=False,
            default={},
            type=dict
        ),
    )

    module = AnsibleModule(
        argument_spec=args,
        supports_check_mode=False,
    )

    k = SystemdUnitFile(module)
    result = k.run()

    module.log(msg=f"= result: {result}")

    module.exit_json(**result)


# import module snippets
if __name__ == "__main__":
    main()
